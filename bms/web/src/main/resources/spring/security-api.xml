<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/security
            http://www.springframework.org/schema/security/spring-security.xsd
            http://www.springframework.org/schema/security/oauth2
            http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

    <!-- 授权管理 -->
    <http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="oauth2AuthenticationManager" entry-point-ref="oauth2AuthenticationEntryPoint">
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>
        <anonymous enabled="false"/>
        <http-basic entry-point-ref="oauth2AuthenticationEntryPoint"/>
        <custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER"/>
        <access-denied-handler ref="oauth2AccessDeniedHandler"/>
    </http>

    <!-- 接口权限管理 -->
    <http pattern="/oauth/api/**" create-session="never" access-decision-manager-ref="oauth2AccessDecisionManager" entry-point-ref="oauth2AuthenticationEntryPoint">
        <anonymous enabled="false" />
        <intercept-url pattern="/oauth/api/**" access="hasRole('ROLE_API_BASE')" />
        <custom-filter ref="oauthAPIResourceServer" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauth2AccessDeniedHandler" />
    </http>

    <!-- 配置这个oauth2的server所能支持的请求类型 -->
    <oauth2:authorization-server client-details-service-ref="clientDetailsService" token-services-ref="tokenServices" user-approval-handler-ref="oauthUserApprovalHandler" >
        <oauth2:authorization-code authorization-code-services-ref="authorizationCodeServices" />
        <oauth2:refresh-token />
        <oauth2:client-credentials />
        <oauth2:password />
    </oauth2:authorization-server>

    <!-- 定义服务器资源 -->
    <oauth2:resource-server id="oauthAPIResourceServer" resource-id="oauth_api" token-services-ref="tokenServices" entry-point-ref="oauth2AuthenticationEntryPoint" />

    <!-- 把验证类型、用户名密码都作为表单参数提交 -->
    <beans:bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <beans:property name="authenticationManager" ref="oauth2AuthenticationManager"/>
        <beans:property name="authenticationEntryPoint" ref="oauth2AuthenticationEntryPoint"/>
    </beans:bean>

    <!-- 访问成功 -->
    <beans:bean id="oauth2AuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="exceptionRenderer" ref="oAuth2ExceptionRenderer"/>
    </beans:bean>
    <!-- 访问拒绝 -->
    <beans:bean id="oauth2AccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler">
        <beans:property name="exceptionRenderer" ref="oAuth2ExceptionRenderer"/>
    </beans:bean>

    <!-- 异常消息处理 -->
    <beans:bean id="oAuth2ExceptionRenderer" class="org.springframework.security.oauth2.provider.error.DefaultOAuth2ExceptionRenderer">
        <beans:property name="messageConverters">
            <beans:list>
                <beans:ref bean="mappingJacksonHttpMessageConverter"/>
            </beans:list>
        </beans:property>
    </beans:bean>
    <!-- JSON 消息处理 -->
    <beans:bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>

    <beans:bean id="requestFactory" class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
        <beans:constructor-arg ref="clientDetailsService"/>
    </beans:bean>

    <!-- 认证点 -->
    <beans:bean id="oauthUserApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
        <beans:property name="tokenStore" ref="tokenStore"/>
        <beans:property name="clientDetailsService" ref="clientDetailsService"/>
        <beans:property name="requestFactory" ref="requestFactory"/>
    </beans:bean>

    <!-- 访问控制 -->
    <beans:bean id="oauth2AccessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
        <beans:constructor-arg>
            <beans:list>
                <beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                <beans:bean class="org.springframework.security.access.vote.RoleVoter"/>
                <beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
                <beans:bean class="org.springframework.security.web.access.expression.WebExpressionVoter"/>
            </beans:list>
        </beans:constructor-arg>
        <beans:property name="allowIfAllAbstainDecisions" value="false"/>
    </beans:bean>

    <beans:bean id="oauth2ClientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg ref="clientDetailsService"/>
    </beans:bean>

    <!-- Token 管理器 -->
    <!--<beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore"/>-->
    <beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
        <beans:constructor-arg ref="dataSource"/>
    </beans:bean>
    <beans:bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <beans:property name="tokenStore" ref="tokenStore"/>
        <beans:property name="supportRefreshToken" value="true"/>
        <beans:property name="clientDetailsService" ref="clientDetailsService"/>
    </beans:bean>

    <!-- 客户端 -->
    <beans:bean id="clientDetailsService" class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService">
        <beans:constructor-arg ref="dataSource"/>
    </beans:bean>

    <!-- 授权码服务 -->
    <beans:bean id="authorizationCodeServices" class="org.springframework.security.oauth2.provider.code.JdbcAuthorizationCodeServices">
        <beans:constructor-arg ref="dataSource"/>
    </beans:bean>

    <!-- OAuth2认证 -->
    <authentication-manager id="oauth2AuthenticationManager">
        <authentication-provider user-service-ref="oauth2ClientDetailsUserService"/>
    </authentication-manager>

</beans:beans>